# $NetBSD: Makefile.common,v 1.1 2021/12/04 08:08:43 xxxx Exp $
#
### used by lang/mrust-mrustc/Makefile
### used by lang/mrust-minicargo/Makefile
### used by lang/mrust-libs/Makefile
### used by lang/mrust-rustc/Makefile
### used by lang/mrust-cargo/Makefile
### used by lang/mrust-rustclibs/Makefile
### used by lang/mrust/Makefile
#
# used by wip/mrust-mrustc/Makefile
# used by wip/mrust-minicargo/Makefile
# used by wip/mrust-libs/Makefile
# used by wip/mrust-rustc/Makefile
# used by wip/mrust-cargo/Makefile
# used by wip/mrust-rustclibs/Makefile
# used by wip/mrust/Makefile
# used by (etc)

GITHUB_PROJECT=	mrustc
GITHUB_TAG=	998dc164309d7d707e5c1c38dd61c0b95169cbcf
DISTNAME=	998dc164309d7d707e5c1c38dd61c0b95169cbcf
SNAPSTAMP=	20220814a
PKGNAME=	mrust-${SNAPSTAMP}
CATEGORIES=	lang
MASTER_SITES=	${MASTER_SITE_GITHUB:=thepowersgang/}
#MASTER_SITES=	https://github.com/thepowersgang/mrustc/archive/0e5ffbf19d4331ec96c2231866a81429b90b2dbe.zip
EXTRACT_SUFX=	.zip
DIST_SUBDIR=	${GITHUB_PROJECT}

#MAINTAINER=	pkgsrc-users@NetBSD.org
MAINTAINER=	pkgsrc-mrust@web5by5.com
#HOMEPAGE=	https://github.com/thepowersgang/mrustc/
HOMEPAGE=	https://github.com/thepowersgang/mrustc\#readme
COMMENT=	Mutabah's Rust Compiler--rustc bootstrapper implemented in C++
LICENSE=	mit


USE_LANGUAGES+=		c++14
USE_TOOLS+=		gmake

RUSTVER=		1.54.0

RUSTSRC_DIST=		rustc-${RUSTVER}-src.tar.gz
SITES.${RUSTSRC_DIST}=	https://static.rust-lang.org/dist/

MR_OUTDIR=		output-${RUSTVER}/

BUILD_MAKE_FLAGS=	PARLEVEL:=${MAKE_JOBS}
MAKE_ENV+=		MRUSTC_TARGET_VER=1.54
MAKE_ENV+=		OUTDIR_SUF=-${RUSTVER}
MAKE_ENV+=		RUSTC_VERSION=${RUSTVER}

##
# FIXME [-DLB, 28dec2021]:
#   On NetBSD 9.x/amd64, setting RUSTC_TARGET results in a
#   "... panicked at 'failed to allocate a guard page', ..." error
#   during the build of rustc (via mrust tools), whereas leaving it
#   unset** results in a successful build; but does it do so at the
#   peril of leaving behind hidden, platform-specific errors, or
#   even just a result that's not well optimized for the platform?
#
#   Therefore: leave it unset for now, but assistance is requested
#   from someone knowledgeable to identify what's going on (e.g,.
#   could this have anything to do with, e.g., a PaX mitigation?).
#
#  ** (in which case it defaults to a -linux suffix)
#
#MAKE_ENV+=		RUSTC_TARGET=${MACHINE_ARCH}-unknown-${OPSYS:tl}
##


.include "../../mk/bsd.prefs.mk"


#.if ${OPSYS} == "Darwin"
#CONFIGURE_ENV+=	CC="${CC} -arch ${MACHINE_ARCH} ${CFLAGS}"
#CONFIGURE_ENV+=	ASPP="${CC} -arch ${MACHINE_ARCH} -c"
#CONFIGURE_ENV+=	AS="as -arch ${MACHINE_ARCH}"
#.else
#CONFIGURE_ENV+=	CC="${CC} ${CFLAGS}"
#.endif


.if !defined(SKIP_MRUSTC_SRC)
SUBST_CLASSES+=			atomic-pathfix
SUBST_STAGE.atomic-pathfix=	pre-configure
SUBST_MESSAGE.atomic-pathfix=	Configuring default path for libatomic.so
SUBST_FILES.atomic-pathfix=	src/trans/target.cpp
SUBST_SED.atomic-pathfix=	-e '/define.*BACKEND_C_OPTS_GNU/s|"atomic"|"atomic", "-L", "${PREFIX}/lib"|'
.endif


post-patch:
	if [ -e ${WRKSRC} ]; then (cd ${WRKSRC};			\
	    ${MV} rust-version rust-version.dist;			\
	    ${ECHO} ${RUSTVER} > rust-version;				\
	    ${TOUCH} -t 200101010101 rust-version); fi


##.include "../../mk/atomic64.mk"	# DLBFLAG: will this be needed?
